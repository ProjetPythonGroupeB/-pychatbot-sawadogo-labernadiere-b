import os
import math

def list_of_files(directory, extension):
    files_names = []
    for filename in os.listdir(directory):
        if filename.endswith(extension):
            files_names.append(filename)
    return files_names

directory = "speeches"
files_names = list_of_files(directory, "txt")


def extrait_nom_président(dossier):
    '''Prend en argument un dossier contenant des fichiers avec des noms
de président, et renvoit une liste avec tout leurs noms'''

    presidents_name = []
    # Initialise la liste qui va contenir le nom des présidents
    for filename in os.listdir(dossier):
        # On récupère la liste des noms de fichiers
        filename = filename.replace("Nomination_","")
        filename = filename.replace(".txt", "")
        # Etant donner que tout les fichiers sont nommé de la même manière
        # On supprime simplement ce qui n'est pas le nom
        for caractere in filename:
            if "0" <= caractere <= '9' :
                filename = filename.replace(caractere, "")
                # On supprime tout les caractères numériques qui peuvent resté
        presidents_name.append(filename)
        # On ajoute le nom du fichier modifié à la liste des noms
    return presidents_name

def Prenom_et_nom(dossier):
    '''Prend en argument un dossier sous la même forme que la précédente
et renvoi à partir de ça une liste contenant le prénom et nom de chaque président'''
    
    president_name = []
    # Initialise la liste qui va contenir les prenoms et noms des présidents
    for filename in os.listdir(dossier):
        # On parcourt la liste des noms 
        filename = filename.replace("Chirac", "Jacques Chirac")
        filename = filename.replace("Giscard dEstaing", "Valery Giscard dEstaing ")
        filename = filename.replace("Hollande", "François Hollande")
        filename = filename.replace("Macron", "Emmanuel Macron")
        filename = filename.replace("Mitterand", "François Mitterand")
        filename = filename.replace("Sarkozy", "Nicolas Sarkozy")
        filename = filename.replace("Nomination", "")
        filename = filename.replace(".txt", "")
        # On remplace chaque nom par leur nom et prénom, et on supprime 
        # Tout ce qui n'est pas le nom du président
        for caractere in filename:
            if "0" <= caractere <= '9' :
                filename = filename.replace(caractere, "")
                # On supprime aussi tout les caractères numériques
        president_name.append(filename)
        # On ajoute tout cela à la liste
    return president_name

def affiche_les_prenoms(liste):
    '''Prend en argument une liste de prénom et la renvoi sans les doublons'''
    
    sans_doublon = []
    # Initialise la liste des 
    for element in liste:
        # Parcourt tout les éléments de la liste donné en argument
        if element not in sans_doublon:
            sans_doublon.append(element)
            # Si cet élément n'est pas dans la nouvelle liste, on l'ajoute
    print(sans_doublon)


def minuscule(Dossier): 
    '''Prend en argument le nom du Dossier contenant tout les fichiers des discors
    -- > Crée un nouveau fichier par texte, en transformant toute les majuscules en minuscules
    Les fichiers sont enregistré dans le dossier 'cleaned'                 '''
    
    liste_fichiers = os.listdir(Dossier)
    # Liste tout les fichiers du dossier pris en argument
    for fichiers in liste_fichiers:
        # Parcourt les fichiers du dossier 
        fichier= open("cleaned_"+ fichiers, "w+")
        # Creer le fichier avec le préfix 'cleaned'  
        repertoire_courant = os.getcwd()
        chemin_fichier = os.path.join(repertoire_courant, Dossier , fichiers)
        texte = open(chemin_fichier, 'r')
        # Ouvre chaque fichier   
        for mot in texte:
            for lettre in mot:
                if ord(lettre) >= 65 and ord(lettre) <= 90:
                    fichier.write(chr(ord(lettre)+32))
                    # Transforme les majuscules en minuscules
                else:
                    fichier.write(lettre)
        fichier.close()
        # MANQUE LE TRANSFERT VERS LE DOSSIER CLEANED
        

def supprime_ponct(Dossier):
    ''' Prend en argument un dossier contenant des fichiers avec uniquement 
    des caractères en minuscules et de la ponctuation, et le renvoit avec la 
    ponctiation remplacé par des espaces'''
    
    liste_fichiers = os.listdir(Dossier)    
    for fichiers in liste_fichiers:
        repertoire_courant = os.getcwd()
        chemin_fichier = os.path.join(repertoire_courant, Dossier , fichiers)
        texte = open(chemin_fichier, 'r')
        contenu = texte.read()
        for i in range(126):
            if i < 97 or i >122 or i == 32:
                contenu = contenu.replace(chr(i), ' ')
        texte = open(chemin_fichier, 'w')
        texte.write(contenu)

def tf(chaîne):
    '''Prend en entrée une chaîne de caractère et renvoie un dictionnaire
contenant le nombre d'apparition de chaque mot'''
    
    dico = {}
    # Initialise un dictionnaire vide
    liste_mot = chaîne.split()
    # Met tout les mots de la châine dans une liste
    for mot in liste_mot:
        if mot in dico:
            dico[mot]+=1
        else:
            dico[mot] =1
    # Si le mot est dans le dico, on augmente sa valeur de 1, sinon on l'ajoute
    return dico

def idf(Dossier):
    '''Prend en argument le dossier contenant tout les textes netoyers, et
calcul l'IDF de tout les mots des fichiers sous forme d'un dictionnaire avec
comme clef le mot et comme valeur son score IDF'''

    # 1 - On récupère le score TF de chaque fichier

    Score = []
    liste_fichiers = os.listdir(Dossier)
    # On liste tout les fichiers du dossier
    for fichiers in liste_fichiers:
        repertoire_courant = os.getcwd()
        chemin_fichier = os.path.join(repertoire_courant, Dossier , fichiers)
        texte = open(chemin_fichier, 'r')
        # On ouvre chaque fichier en mode lecture
        contenu = texte.read()
        # On récupère le contenu du texte
        texte.close()
        Score.append(tf(contenu))
        # On ajoute à la liste de score chaque TF
    
    # 2 - On calcul l'IDF

    nb_doc = len(Score)
    Liste_mot = []
    # On créer une liste avec tout les mots
    for i in range(nb_doc):
        for mot in Score[i].keys():
            if not mot in Liste_mot:
                Liste_mot.append(mot)

    IDF = {}
    # On initialise le dictionnaire qui contiendra les valeurs
    
    for mot in Liste_mot:
        compteur = 0
        for i in range(nb_doc):
            if mot in Score[i].keys():
                compteur +=1
    # Pour chaqun des mots, on compte dans combien de doc il apparait
        IDF[mot]= math.log(nb_doc/compteur)
        # On applique la formule de l'IDF
    return IDF

def tf_idf(Dossier):
    
    # 1 - On récupère le score TF de chaque fichier

    Score = []
    liste_fichiers = os.listdir(Dossier)
    # On liste tout les fichiers du dossier
    for fichiers in liste_fichiers:
        repertoire_courant = os.getcwd()
        chemin_fichier = os.path.join(repertoire_courant, Dossier , fichiers)
        texte = open(chemin_fichier, 'r')
        # On ouvre chaque fichier en mode lecture
        contenu = texte.read()
        # On récupère le contenu du texte
        texte.close()
        Score.append(tf(contenu))
        # On ajoute à la liste de score chaque TF
    
    # 2- On calul le TF-IDF 
    
    IDF = idf('cleaned') # On récupère le score IDF de chaque mot
    TF_IDF = [[],[],[],[],[],[],[],[]]
    nb_doc = len(Score)
    for mot in IDF.keys():
        for i in range(nb_doc):
            if mot not in Score[i].keys():
                TF_IDF[i].append(0)
            else:
                TF_IDF[i].append(IDF[mot]* Score[i][mot])
    return TF_IDF

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# PROGRAMME PRINCIPAL
def qq1(TF_IDF):
    L = []
    Non_important = []
    for i in range(len(TF_IDF)):
        for j in range(len(TF_IDF[i])):
            if TF_IDF[i][j]==0:
                L.append(j)
    Occurence = {}
    for valeur in L:
        if not valeur in Occurence.keys():
            Occurence[valeur]=1
        else:
            Occurence[valeur]+=1
    for indice in Occurence.keys():
        if Occurence[indice] == 8:
            Non_important.append(indice)
    IDF = idf('cleaned')
    liste_cles = list(IDF.keys())
    for i in range(len(Non_important)):
        Non_important[i]= liste_cles[Non_important[i]]
    return Non_important

def qq2(TF_IDF):
    grand = 0
    L = []
    for i in range(len(TF_IDF)):
        for j in range(len(TF_IDF[i])):
            if TF_IDF[i][j]> grand:
                grand = TF_IDF[i][j]
    for i in range(len(TF_IDF)):
        for j in range(len(TF_IDF[i])):
            if TF_IDF[i][j] == grand:
                L.append(j)
    IDF = idf('cleaned')
    liste_cles = list(IDF.keys())
    for i in range(len(L)):
        L[i]= liste_cles[L[i]]
    return L

def qq3(Dossier):
    liste_fichiers = os.listdir(Dossier)
    Score = []
    Occurence = {}
    grand = 0
    Mots =[]
    # On liste tout les fichiers du dossier
    for fichiers in liste_fichiers:
        if 'Chirac' in fichiers:
            repertoire_courant = os.getcwd()
            chemin_fichier = os.path.join(repertoire_courant, Dossier , fichiers)
            texte = open(chemin_fichier, 'r')
            contenu = texte.read()
            texte.close()
        else:
            pass
        Score.append(tf(contenu))
    for i in range(len(Score)):
        for mot in Score[i].keys():
            if not mot in Occurence:
                Occurence[mot] = Score[i][mot]
            else:
                Occurence[mot] += Score[i][mot]
    for mot in Occurence.keys():
        if Occurence[mot]>grand:
            grand = Occurence[mot]
    for mot in Occurence.keys():
        if Occurence[mot] == grand:
            Mots.append(mot)
    return Mots

Question = True
while Question:
    qq= int(input("A quelle question voulez vous répondre ? "))
    if qq == 1:
        a = qq1(tf_idf('cleaned'))
        print('La liste des mots dits "non importants" sont', a)
    elif qq == 2:
        a = qq2(tf_idf('cleaned'))
        print('La liste des mots avec le Score TF-IDF le plus élevé sont', a)
    elif qq == 3:
        a = qq3('cleaned')
        print('Le(s) mot(s) le(s) plus répété(s) par Chirac sont', a)
    else:
        print("Cette question n'est pas défini")  
    
    Continue= input("Avez vous d'autres questions ? ")
    if Continue == 'Oui' or Continue == 'oui':
        pass
    else:
        Question = False   
print(tf_idf('cleaned'))

# FONCTION POUR AIDER LE CODE

 

def récupère_contenue(Dossier, fichiers):

    repertoire_courant = os.getcwd()

    chemin_fichier = os.path.join(repertoire_courant, Dossier , fichiers)

    texte = open(chemin_fichier, 'r')

    contenu = texte.read()

    texte.close()

    return contenu

 

def ajoute_dico(dico, liste_mot):  

    for mot in liste_mot:

            if mot in dico:

                dico[mot]+=1

            else:

                dico[mot] =1

 

def list_of_files(directory, extension):

    files_names = []

    for filename in os.listdir(directory):

        if filename.endswith(extension):

            files_names.append(filename)

    return files_names

 

directory = "speeches"

files_names = list_of_files(directory, "txt")

 

def extrait_nom_président(dossier):

    '''Prend en argument un dossier contenant des fichiers avec des noms

de président, et renvoit une liste avec tous leurs noms'''

 

    presidents_name = []

    # Initialise la liste qui va contenir le nom des présidents

    for filename in os.listdir(dossier):

        # On récupère la liste des noms de fichiers

        filename = filename.replace("Nomination_","")

        filename = filename.replace(".txt", "")

        # Etant donner que tout les fichiers sont nommé de la même manière

        # On supprime simplement ce qui n'est pas le nom

        for caractere in filename:

            if "0" <= caractere <= '9' :

                filename = filename.replace(caractere, "")

                # On supprime tout les caractères numériques qui peuvent resté

        presidents_name.append(filename)

        # On ajoute le nom du fichier modifié à la liste des noms

    return presidents_name

 

def Prenom_et_nom(dossier):

    '''Prend en argument un dossier sous la même forme que la précédente

et renvoi à partir de ça une liste contenant le prénom et nom de chaque président'''

   

    president_name = []

    # Initialise la liste qui va contenir les prenoms et noms des présidents

    for filename in os.listdir(dossier):

        # On parcourt la liste des noms

        filename = filename.replace("Chirac", "Jacques Chirac")

        filename = filename.replace("Giscard dEstaing", "Valery Giscard dEstaing ")

        filename = filename.replace("Hollande", "François Hollande")

        filename = filename.replace("Macron", "Emmanuel Macron")

        filename = filename.replace("Mitterand", "François Mitterand")

        filename = filename.replace("Sarkozy", "Nicolas Sarkozy")

        filename = filename.replace("Nomination", "")

        filename = filename.replace(".txt", "")

        # On remplace chaque nom par leur nom et prénom, et on supprime

        # Tout ce qui n'est pas le nom du président

        for caractere in filename:

            if "0" <= caractere <= '9' :

                filename = filename.replace(caractere, "")

                # On supprime aussi tout les caractères numériques

        president_name.append(filename)

        # On ajoute tout cela à la liste

    return president_name

 

def affiche_les_prenoms(liste):

    '''Prend en argument une liste de prénom et la renvoi sans les doublons'''

   

    sans_doublon = []

    # Initialise la liste des

    for element in liste:

        # Parcourt tout les éléments de la liste donné en argument

        if element not in sans_doublon:

            sans_doublon.append(element)

            # Si cet élément n'est pas dans la nouvelle liste, on l'ajoute

    print(sans_doublon)

 

def minuscule(Dossier):

    '''Prend en argument le nom du Dossier contenant tout les fichiers des discours

    -- > Crée un nouveau fichier par texte, en transformant toute les majuscules en minuscules

    Les fichiers sont enregistré dans le dossier 'cleaned'                 '''

   

    liste_fichiers = os.listdir(Dossier)

    # Liste tout les fichiers du dossier pris en argument

    for fichiers in liste_fichiers:

        # Parcourt les fichiers du dossier

        fichier= open("cleaned_"+ fichiers, "w+")

        # Creer le fichier avec le préfix 'cleaned'  

        repertoire_courant = os.getcwd()

        chemin_fichier = os.path.join(repertoire_courant, Dossier , fichiers)

        texte = open(chemin_fichier, 'r')

        # Ouvre chaque fichier  

        for mot in texte:

            for lettre in mot:

                if ord(lettre) >= 65 and ord(lettre) <= 90:

                    fichier.write(chr(ord(lettre)+32))

                    # Transforme les majuscules en minuscules

                else:

                    fichier.write(lettre)

        fichier.close()

        # MANQUE LE TRANSFERT VERS LE DOSSIER CLEANED

       

def supprime_ponct(Dossier):

    ''' Prend en argument un dossier contenant des fichiers avec uniquement

    des caractères en minuscules et de la ponctuation, et le renvoit avec la

    ponctuation remplacé par des espaces'''

   

    liste_fichiers = os.listdir(Dossier)    

    for fichiers in liste_fichiers:

        repertoire_courant = os.getcwd()

        chemin_fichier = os.path.join(repertoire_courant, Dossier , fichiers)

        texte = open(chemin_fichier, 'r')

        contenu = texte.read()

        for i in range(126):

            if i < 97 or i >122 or i == 32:

                contenu = contenu.replace(chr(i), ' ')

        texte = open(chemin_fichier, 'w')

        texte.write(contenu)

 

def tf(chaîne):

    '''Prend en entrée une chaîne de caractère et renvoie un dictionnaire

contenant le nombre d'apparition de chaque mot'''

   

    dico = {}

    # Initialise un dictionnaire vide

    liste_mot = chaîne.split()

    # Met tout les mots de la châine dans une liste

    for mot in liste_mot:

        if mot in dico:

            dico[mot]+=1

        else:

            dico[mot] =1

    # Si le mot est dans le dico, on augmente sa valeur de 1, sinon on l'ajoute

    return dico

 

def idf(Dossier):

    '''Prend en argument le dossier contenant tous les textes nettoyer, et

calcul l'IDF de tout les mots des fichiers sous forme d'un dictionnaire avec

comme clef le mot et comme valeur son score IDF'''

 

    # 1 - On récupère le score TF de chaque fichier

 

    Score = []

    liste_fichiers = os.listdir(Dossier)

    # On liste tout les fichiers du dossier

    for fichiers in liste_fichiers:

        repertoire_courant = os.getcwd()

        chemin_fichier = os.path.join(repertoire_courant, Dossier , fichiers)

        texte = open(chemin_fichier, 'r')

        # On ouvre chaque fichier en mode lecture

        contenu = texte.read()

        # On récupère le contenu du texte

        texte.close()

        Score.append(tf(contenu))

        # On ajoute à la liste de score chaque TF

   

    # 2 - On calcul l'IDF

 

    nb_doc = len(Score)

    Liste_mot = []

    # On créer une liste avec tout les mots

